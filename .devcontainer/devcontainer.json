// https://containers.dev/templates
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/kubernetes-helm-minikube
{
	"name": "Kubefirst DevContainer",
	"dockerComposeFile": "docker-compose.yaml",
	"service": "kubefirst",
	"workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	// https://aka.ms/dev-containers-non-root.
	"remoteUser": "vscode",
	// https://code.visualstudio.com/remote/advancedcontainers/environment-variables
	"userEnvProbe": "loginInteractiveShell",
	// https://containers.dev/features
	"remoteEnv": {
		// WSLg GUI Apps in Dev Space
		// "TERM": "${localEnv:TERM}",
		// "DISPLAY": "${localEnv:DISPLAY}",
		// "WAYLAND_DISPLAY":  "${localEnv:WAYLAND_DISPLAY}",
		// "PULSE_SERVER": "${localEnv:PULSE_SERVER}",
		// "WSL2_GUI_APPS_ENABLED": "${localEnv:WSL2_GUI_APPS_ENABLED}"
	},
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		11080,
		11901,
		12080,
		13080,
		13443,
		14080,
		14443,
		15080,
		16080,
		17080,
		17081,
		18080,
		18081,
		18082
	],
	"portsAttributes": {
		"11080": {
			"label": "Web Desktop (noVNC)",
			"protocol": "http"
		},
		"11901": {
			"label": "VNC",
			"protocol": "http"
		},
		"12080": {
			"label": "Kubefirst Console",
			"protocol": "http"
		},
		"13080": {
			"label": "Vault (http)",
			"protocol": "http"
		},
		"13443": {
			"label": "Vault (https)",
			"protocol": "https"
		},
		"14080": {
			"label": "Argo Workflows",
			"protocol": "http"
		},
		"14443": {
			"label": "Argo CD",
			"protocol": "https"
		},
		"15080": {
			"label": "Atlantis Terraform Automation",
			"protocol": "http"
		},
		"16080": {
			"label": "ChartMuseum",
			"protocol": "http"
		},
		"17080": {
			"label": "MinIO",
			"protocol": "http"
		},
		"17081": {
			"label": "MinIO Console",
			"protocol": "http"
		},
		"18080": {
			"label": "Sample App Metaphor - Development",
			"protocol": "http"
		},
		"18081": {
			"label": "Sample App Metaphor - Staging",
			"protocol": "http"
		},
		"18082": {
			"label": "Sample App Metaphor - Production",
			"protocol": "http"
		}
	},
	// https://code.visualstudio.com/remote/advancedcontainers/start-processes
	// https://containers.dev/implementors/json_reference/#lifecycle-scripts
	"updateContentCommand": [
		"/bin/zsh",
		"-l",
		"-c",
		"./run events update-content"
	],
	"onCreateCommand": [
		"/bin/zsh",
		"-l",
		"-c",
		"./run events on-create"
	],
	"postCreateCommand": [
		"/bin/zsh",
		"-l",
		"-c",
		"./run events post-create"
	],
	"postStartCommand": [
		"/bin/zsh",
		"-l",
		"-c",
		"./run events post-start"
	],
	"postAttachCommand": "nohup bash -c './run events post-attach &'",
	"customizations": {
		"vscode": {
			"settings": {
				"terminal.integrated.profiles.linux": {
					"zsh": {
						"path": "zsh",
						"args": [
							"-l"
						]
					}
				},
				"terminal.integrated.defaultProfile.linux": "zsh",
				"json.schemas": [
					{
						"fileMatch": [
							"*/devcontainer-feature.json"
						],
						"url": "https://raw.githubusercontent.com/devcontainers/spec/main/schemas/devContainerFeature.schema.json"
					}
				]
			},
			"extensions": [
				"editorconfig.editorconfig",
				"ms-azuretools.vscode-docker",
				"gitHub.codespaces",
				"gitHub.vscode-pull-request-github",
				"gitHub.remotehub",
				"gitHub.copilot-nightly",
				"gitHub.copilot-labs",
				"github.vscode-github-actions",
				"hilleer.yaml-plus-json",
				"ms-vscode-remote.remote-containers",
				"rogalmic.zsh-debug",
				"rogalmic.bash-debug",
				"shakram02.bash-beautify",
				"lizebang.bash-extension-pack",
				"ms-dotnettools.csharp",
				"dbaeumer.vscode-eslint",
				"ms-vscode.powershell",
				"ms-kubernetes-tools.vscode-kubernetes-tools",
				"mindaro.mindaro",
				"hashicorp.terraform",
				"ms-azuretools.vscode-azureterraform"
			]
		}
	},
	"features": {
		// https://github.com/AlephZ-ai/devcontainer-features/tree/main/src/homebrew
		"ghcr.io/AlephZ-ai/devcontainer-features/homebrew": {
			"brews": "kubernetes-cli helm kustomize skaffold derailed/k9s/k9s argocd minikube kind k3d vcluster kubefirst/tools/kubefirst terraform"
		},
		// https://github.com/devcontainers/features/tree/main/src/node
		"ghcr.io/AlephZ-ai/devcontainer-features/nvm": {
			"nodeGypDependencies": "true",
			"packages": "@npmcli/fs"
		}
		// https://github.com/devcontainers/features/tree/main/src/terraform
		// "ghcr.io/devcontainers/features/terraform:1": {
		// 	"version": "latest",
		// 	"tflint": "latest",
		// 	"terragrunt": "latest",
		// 	"installSentinel": false,
		// 	"installTFsec": false,
		// 	"installTerraformDocs": false			
		// }
	}
}